// Copyright 2025, OpenRemote Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//
// SPDX-License-Identifier: AGPL-3.0-or-later

// TODO: Automatically generate the Models via OpenAPI spec -- See https://github.com/openremote/service-ml-forecast/issues/31

/**
 * Enum representing the different types of machine learning models available.
 * Corresponds to service_ml_forecast.models.model_type.ModelTypeEnum
 */
export enum ModelTypeEnum {
    PROPHET = 'prophet'
}

/**
 * Represents an asset attribute feature used in model configuration.
 * Corresponds to Python class AssetAttributeFeature.
 */
export interface TargetFeature {
    /**
     * ID of the asset from OpenRemote.
     * Constraints: min_length=22, max_length=22
     */
    asset_id: string;
    /**
     * Name of the attribute of the asset.
     * Constraints: min_length=3
     */
    attribute_name: string;
    /**
     * Timestamp in milliseconds since epoch. All data after this timestamp will be used for forecasting.
     * Constraints: gt=0
     */
    cutoff_timestamp: number;
}

/**
 * Represents a regressor feature used in model configuration.
 */
export interface RegressorFeature {
    /**
     * ID of the asset from OpenRemote.
     * Constraints: min_length=22, max_length=22
     */
    asset_id: string;
    /**
     * Name of the attribute of the asset.
     * Constraints: min_length=3
     */
    attribute_name: string;
    /**
     * Timestamp in milliseconds since epoch. All data after this timestamp will be used for forecasting.
     * Constraints: gt=0
     */
    cutoff_timestamp: number;
}

/**
 * Represents an attribute of an asset.
 */
export interface BasicAttribute {
    /**
     * Name of the attribute.
     */
    name: string;
    /**
     * Value of the attribute. Can be any type or null.
     */
    value?: any | null; // Optional as it allows None
    /**
     * Timestamp of the attribute value in milliseconds since epoch.
     */
    timestamp: number;
    /**
     * Meta data of the attribute.
     */
    meta: { [key: string]: any };
}

/**
 * Represents a minimal asset from OpenRemote.
 */
export interface BasicAsset {
    /**
     * ID of the asset.
     */
    id: string;
    /**
     * Realm of the asset.
     */
    realm: string;
    /**
     * Name of the asset.
     */
    name: string;
    /**
     * ID of the parent asset, if any.
     * @default null
     */
    parentId?: string | null; // Optional as it has a default
    /**
     * Dictionary mapping attribute names to their corresponding AssetAttribute objects.
     */
    attributes: { [key: string]: BasicAttribute };
}

/**
 * Base configuration common to all ML models.
 */
interface BaseModelConfig {
    /**
     * ID of the model configuration. If not provided, a random uuid v4 should be generated by the backend.
     */
    id?: string; // Optional as it has a default_factory
    /**
     * Realm where the assets and their datapoints are available.
     */
    realm: string;
    /**
     * Friendly name for the model configuration.
     */
    name: string;
    /**
     * Whether the model is enabled and will be scheduled for training and forecasting.
     * @default true
     */
    enabled?: boolean; // Optional as it has a default
    /**
     * Which machine learning model to use.
     */
    type: ModelTypeEnum;
    /**
     * The asset attribute to generate datapoints for.
     * There must be historical data available for training.
     */
    target: TargetFeature;
    /**
     * List of asset attributes that will be used as regressors.
     * There must be historical data available for training.
     * @default null
     */
    regressors?: RegressorFeature[] | null; // Optional as it has a default
    /**
     * Forecast generation interval. Expects ISO 8601 duration strings.
     */
    forecast_interval: string;
    /**
     * Model training interval. Expects ISO 8601 duration strings.
     */
    training_interval: string;
    /**
     * Number of periods to forecast into the future.
     */
    forecast_periods: number;
    /**
     * The frequency of each forecasted datapoint. Expects a pandas frequency string.
     * E.g. '30min' or '1h'.
     * Generated forecast datapoints are rounded to the nearest frequency.
     * Example: 15:30 -> 16:00 -> 16:30 etc.
     */
    forecast_frequency: string;
}

/**
 * Seasonality modes for the Prophet model.
 */
export enum ProphetSeasonalityModeEnum {
    ADDITIVE = 'additive',
    MULTIPLICATIVE = 'multiplicative'
}

/**
 * Prophet specific model configuration.
 */
export interface ProphetModelConfig extends BaseModelConfig {
    /**
     * Discriminator field indicating the model type is Prophet.
     */
    type: ModelTypeEnum.PROPHET; // Use literal type for discriminator
    /**
     * Include yearly seasonality in the model.
     * @default true
     */
    yearly_seasonality?: boolean; // Optional as it has a default
    /**
     * Include weekly seasonality in the model.
     * @default true
     */
    weekly_seasonality?: boolean; // Optional as it has a default
    /**
     * Include daily seasonality in the model.
     * @default true
     */
    daily_seasonality?: boolean; // Optional as it has a default
    /**
     * Seasonality mode of the model. Additive or multiplicative.
     * @default ProphetSeasonalityModeEnum.ADDITIVE
     */
    seasonality_mode?: ProphetSeasonalityModeEnum; // Optional as it has a default
    /**
     * Proportion of historical data used for detecting changepoints.
     * A higher value (e.g., 0.9-1.0) makes the model more responsive to recent trends.
     * Constraints: ge=0.0, le=1.0
     * @default 0.8
     */
    changepoint_range?: number; // Optional as it has a default
    /**
     * Controls trend flexibility at changepoints.
     * Lower values (e.g., 0.01) result in smoother trends,
     * while higher values (e.g., 0.5) allow more abrupt changes.
     * Constraints: ge=0.0, le=1.0
     * @default 0.05
     */
    changepoint_prior_scale?: number; // Optional as it has a default
}

/**
 * Represents a model configuration, which can be one of the specific model types.
 * This uses a discriminated union based on the 'type' field.
 */
export type ModelConfig = ProphetModelConfig;

/**
 * Represents the configuration of a realm.
 */
export interface RealmConfig {
    /**
     * Styles of the realm.
     */
    styles: string;
    /**
     * Logo of the realm.
     */
    logo: string;
    /**
     * Logo of the realm for mobile devices.
     */
    logoMobile: string;
}
