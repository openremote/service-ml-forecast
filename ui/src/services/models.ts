

/**
 * Enum representing the different types of machine learning models available.
 * Corresponds to service_ml_forecast.models.model_type.ModelTypeEnum
 */
export enum ModelTypeEnum {
  PROPHET = "prophet",
  // Add other model types here if applicable
}

/**
 * Represents an asset attribute feature used in model configuration.
 * Corresponds to Python class AssetAttributeFeature.
 */
export interface AssetAttributeFeature {
  /**
   * ID of the asset from OpenRemote.
   * Constraints: min_length=22, max_length=22
   */
  asset_id: string;
  /**
   * Name of the attribute of the asset.
   * Constraints: min_length=3
   */
  attribute_name: string;
  /**
   * Timestamp in milliseconds since epoch. All data after this timestamp will be used for forecasting.
   * Constraints: gt=0
   */
  cutoff_timestamp: number;
}

/**
 * Base configuration common to all ML models.
 * Corresponds to Python class BaseModelConfig.
 */
class BaseModelConfig {
  /**
   * ID of the model configuration. If not provided, a random uuid v4 should be generated by the backend.
   */
  id?: string; // Optional as it has a default_factory
  /**
   * Realm where the assets and their datapoints are available.
   */
  realm: string = "";
  /**
   * Friendly name for the model configuration.
   */
  name: string = "";
  /**
   * Whether the model is enabled and will be scheduled for training and forecasting.
   * @default true
   */
  enabled: boolean = true; // Optional as it has a default
  /**
   * Which machine learning model to use.
   */
  type: ModelTypeEnum = ModelTypeEnum.PROPHET;
  /**
   * The asset attribute to generate datapoints for.
   * There must be historical data available for training.
   */
  target: AssetAttributeFeature = {
    asset_id: "",
    attribute_name: "",
    cutoff_timestamp: 0
  };
  /**
   * List of asset attributes that will be used as regressors.
   * There must be historical data available for training.
   * @default null
   */
  regressors?: AssetAttributeFeature[] | null = null; // Optional as it has a default
  /**
   * Forecast generation interval. Expects ISO 8601 duration strings.
   */
  forecast_interval: string = "PT1H";
  /**
   * Model training interval. Expects ISO 8601 duration strings.
   */
  training_interval: string = "PT24H";
  /**
   * Number of periods to forecast into the future.
   */
  forecast_periods: number = 48;
  /**
   * The frequency of each forecasted datapoint. Expects a pandas offset string.
   * E.g. '30min' or '1h'.
   * Generated forecast datapoints are rounded to the nearest frequency.
   * Example: 15:30 -> 16:00 -> 16:30 etc.
   */
  forecast_frequency: string = "1h";
}

/**
 * Seasonality modes for the Prophet model.
 * Corresponds to Python enum ProphetSeasonalityModeEnum.
 */
export enum ProphetSeasonalityModeEnum {
  ADDITIVE = "additive",
  MULTIPLICATIVE = "multiplicative",
}

/**
 * Prophet specific model configuration.
 * Corresponds to Python class ProphetModelConfig.
 */
export class ProphetModelConfig extends BaseModelConfig {
  /**
   * Discriminator field indicating the model type is Prophet.
   */
  type: ModelTypeEnum = ModelTypeEnum.PROPHET;
  /**
   * Include yearly seasonality in the model.
   * @default true
   */
  yearly_seasonality: boolean = true; // Optional as it has a default
  /**
   * Include weekly seasonality in the model.
   * @default true
   */
  weekly_seasonality: boolean = true; // Optional as it has a default
  /**
   * Include daily seasonality in the model.
   * @default true
   */
  daily_seasonality: boolean = true; // Optional as it has a default
  /**
   * Seasonality mode of the model. Additive or multiplicative.
   * @default ProphetSeasonalityModeEnum.ADDITIVE
   */
  seasonality_mode: ProphetSeasonalityModeEnum = ProphetSeasonalityModeEnum.ADDITIVE; // Optional as it has a default
  /**
   * Proportion of historical data used for detecting changepoints.
   * A higher value (e.g., 0.9-1.0) makes the model more responsive to recent trends.
   * Constraints: ge=0.0, le=1.0
   * @default 0.8
   */
  changepoint_range: number = 0.8; // Optional as it has a default
  /**
   * Controls trend flexibility at changepoints.
   * Lower values (e.g., 0.01) result in smoother trends,
   * while higher values (e.g., 0.5) allow more abrupt changes.
   * Constraints: ge=0.0, le=1.0
   * @default 0.05
   */
  changepoint_prior_scale: number = 0.05; // Optional as it has a default
}

/**
 * Represents a model configuration, which can be one of the specific model types.
 * This uses a discriminated union based on the 'type' field.
 * Corresponds to Python type hint ModelConfig.
 */
export type ModelConfig = ProphetModelConfig; // Add other config types here with | (e.g., | OtherModelConfig)

