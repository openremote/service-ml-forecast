

// API Client
// {"openapi":"3.1.0","info":{"title":"service-ml-forecast","description":"Machine Learning Forecast Service","version":"0.1.0"},"paths":{"/model/config/":{"post":{"tags":["Model Configs"],"summary":"Create a new model config","operationId":"create_model_config_model_config__post","requestBody":{"required":true,"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/ProphetModelConfig"}],"discriminator":{"propertyName":"type","mapping":{"prophet":"#/components/schemas/ProphetModelConfig"}},"title":"Model Config"}}}},"responses":{"200":{"description":"Model config has been created","content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/ProphetModelConfig"}],"discriminator":{"propertyName":"type","mapping":{"prophet":"#/components/schemas/ProphetModelConfig"}},"title":"Response Create Model Config Model Config  Post"}}}},"409":{"description":"Model config already exists"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"get":{"tags":["Model Configs"],"summary":"Get all model configs with optional realm filter","operationId":"get_model_configs_model_config__get","parameters":[{"name":"realm","in":"query","required":false,"schema":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Realm"}}],"responses":{"200":{"description":"List of model configs has been retrieved","content":{"application/json":{"schema":{"type":"array","items":{"oneOf":[{"$ref":"#/components/schemas/ProphetModelConfig"}],"discriminator":{"propertyName":"type","mapping":{"prophet":"#/components/schemas/ProphetModelConfig"}}},"title":"Response Get Model Configs Model Config  Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["Model Configs"],"summary":"Update a model config","operationId":"update_model_config_model_config__put","requestBody":{"required":true,"content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/ProphetModelConfig"}],"discriminator":{"propertyName":"type","mapping":{"prophet":"#/components/schemas/ProphetModelConfig"}},"title":"Model Config"}}}},"responses":{"200":{"description":"Model config has been updated","content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/ProphetModelConfig"}],"discriminator":{"propertyName":"type","mapping":{"prophet":"#/components/schemas/ProphetModelConfig"}},"title":"Response Update Model Config Model Config  Put"}}}},"404":{"description":"Model config not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/model/config/{id}":{"get":{"tags":["Model Configs"],"summary":"Get a model config","operationId":"get_model_config_model_config__id__get","parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Id"}}],"responses":{"200":{"description":"Model config has been retrieved","content":{"application/json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/ProphetModelConfig"}],"discriminator":{"propertyName":"type","mapping":{"prophet":"#/components/schemas/ProphetModelConfig"}},"title":"Response Get Model Config Model Config  Id  Get"}}}},"404":{"description":"Model config not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["Model Configs"],"summary":"Delete a model config","operationId":"delete_model_config_model_config__id__delete","parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"string","format":"uuid","title":"Id"}}],"responses":{"200":{"description":"Model config has been deleted","content":{"application/json":{"schema":{}}}},"404":{"description":"Model config not found"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}}},"components":{"schemas":{"AssetAttributeFeature":{"properties":{"asset_id":{"type":"string","maxLength":22,"minLength":22,"title":"Asset Id","description":"ID of the asset from OpenRemote."},"attribute_name":{"type":"string","minLength":3,"title":"Attribute Name","description":"Name of the attribute of the asset."},"cutoff_timestamp":{"type":"integer","exclusiveMinimum":0.0,"title":"Cutoff Timestamp","description":"Timestamp in milliseconds since epoch, all data after this timestamp will be used."}},"type":"object","required":["asset_id","attribute_name","cutoff_timestamp"],"title":"AssetAttributeFeature","description":"Asset attribute feature with the asset id, attribute name and the cutoff timestamp."},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"ProphetModelConfig":{"properties":{"id":{"type":"string","format":"uuid","title":"Id","description":"ID of the model configuration. If not provided, a random uuid v4 will be generated."},"realm":{"type":"string","title":"Realm","description":"Realm of where the assets and their datapoints are available."},"name":{"type":"string","title":"Name","description":"Friendly name for the model configuration."},"enabled":{"type":"boolean","title":"Enabled","description":"Whether the model is enabled and will be scheduled for training and forecasting.","default":true},"type":{"type":"string","const":"prophet","title":"Type","default":"prophet"},"target":{"$ref":"#/components/schemas/AssetAttributeFeature","description":"The asset attribute to generate datapoints for. There must be historical data available for training."},"regressors":{"anyOf":[{"items":{"$ref":"#/components/schemas/AssetAttributeFeature"},"type":"array"},{"type":"null"}],"title":"Regressors","description":"List of asset attributes that will be used as regressors. There must be historical data available for training."},"forecast_interval":{"type":"string","title":"Forecast Interval","description":"Forecast generation interval. Expects ISO 8601 duration strings."},"training_interval":{"type":"string","title":"Training Interval","description":"Model training interval. Expects ISO 8601 duration strings."},"forecast_periods":{"type":"integer","title":"Forecast Periods","description":"Number of periods to forecast."},"forecast_frequency":{"type":"string","title":"Forecast Frequency","description":"The frequency of each forecasted datapoint. Expects a pandas offset string. E.g. '30min' or '1h'. Generated forecast datapoints are rounded to the nearest frequency. Example: 15:30 -> 16:00 -> 16:30 etc."},"yearly_seasonality":{"type":"boolean","title":"Yearly Seasonality","description":"Include yearly seasonality in the model.","default":true},"weekly_seasonality":{"type":"boolean","title":"Weekly Seasonality","description":"Include weekly seasonality in the model.","default":true},"daily_seasonality":{"type":"boolean","title":"Daily Seasonality","description":"Include daily seasonality in the model.","default":true},"seasonality_mode":{"$ref":"#/components/schemas/ProphetSeasonalityModeEnum","description":"Seasonality mode of the model. Additive or multiplicative.","default":"additive"},"changepoint_range":{"type":"number","maximum":1.0,"minimum":0.0,"title":"Changepoint Range","description":"Proportion of historical data used for detecting changepoints. A higher value (e.g., 0.9-1.0) makes the model more responsive to recent trends.","default":0.8},"changepoint_prior_scale":{"type":"number","maximum":1.0,"minimum":0.0,"title":"Changepoint Prior Scale","description":"Controls trend flexibility at changepoints. Lower values (e.g., 0.01) result in smoother trends, while higher values (e.g., 0.5) allow more abrupt changes.","default":0.05}},"type":"object","required":["realm","name","target","forecast_interval","training_interval","forecast_periods","forecast_frequency"],"title":"ProphetModelConfig","description":"Prophet specific configuration."},"ProphetSeasonalityModeEnum":{"type":"string","enum":["additive","multiplicative"],"title":"ProphetSeasonalityModeEnum","description":"Seasonality modes of the Prophet model."},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}}}}

import { ModelConfig } from "./models";

export class ServiceClient {
    private readonly baseUrl: string = "http://localhost:8000"

    async getModelConfigs(realm?: string) : Promise<ModelConfig[]> {
        const response = await fetch(`${this.baseUrl}/model/config/` + (realm ? `?realm=${realm}` : ''), {
            method: "GET",
        });
        return response.json();
    }

    async getModelConfig(id: string) : Promise<ModelConfig> {
        const response = await fetch(`${this.baseUrl}/model/config/${id}`, {
            method: "GET",
        });
        return response.json();
    }
    
    
}
