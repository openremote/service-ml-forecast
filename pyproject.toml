[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "service-ml-forecast"
version = "0.2.0"
description = "ML Forecast Service"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "fastapi>=0.115.11",
    "uvicorn>=0.34.0",
    "pyyaml>=6.0.2",
    "tomli>=2.2.1",
    "httpx>=0.28.1",
    "apscheduler>=3.11.0",
    "cryptography>=44.0.2",
    "pydantic>=2.10.6",
    "pydantic-settings>=2.8.1",
    "prophet>=1.1.6",
    "plotly>=6.0.1",
    "pandas>=2.2.3",
    "numpy>=2.2.4",
    "pyzmq>=26.3.0",
    "isodate>=0.7.2",
    "pyjwt>=2.10.1",
    "aiocache>=0.12.3",
    "openremote-client",
    "scikit-learn>=1.7.2",
]


# Workspace and sources for local packages
[tool.uv.workspace]
members = ["packages/*"]

[tool.uv.sources]
openremote-client = { workspace = true }


[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "mypy>=1.15.0",
    "ruff>=0.11.0",
    "build>=1.2.2",
    "respx>=0.22.0",
    "pandas-stubs>=2.2.3",
]

[project.urls]
"Homepage" = "https://github.com/openremote/service-ml-forecast"
"Bug Tracker" = "https://github.com/openremote/service-ml-forecast/issues"

[tool.setuptools]
packages = ["service_ml_forecast", "scripts"]
package-dir = { "service_ml_forecast" = "src/service_ml_forecast", "scripts" = "scripts" }

[tool.ruff]
line-length = 120
target-version = "py313"
fix = true
unsafe-fixes = false
indent-width = 4

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C90", # mccabe complexity
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = ["PLR0913", "B008", "C901", "PLR0912"]
fixable = ["ALL"]

[tool.ruff.format]
line-ending = "auto"
quote-style = "double"
docstring-code-format = true
docstring-code-line-length = "dynamic"
indent-style = "space"


[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_optional = true
strict = true
ignore_missing_imports = true

[tool.ruff.lint.isort]
known-first-party = ["service_ml_forecast"]
combine-as-imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
filterwarnings = ["ignore:.*"]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[project.scripts]
service_ml_forecast = "service_ml_forecast.main:app"

# CLI helpers
help = "scripts.tools:help"

lint = "scripts.tools:lint" # lint backend and packages
format = "scripts.tools:format" # format backend and packages
test = "scripts.tools:test" # test backend and packages
test-coverage = "scripts.tools:test_coverage" # test backend and packages with coverage
build = "scripts.tools:build" # build backend and packages
start = "scripts.tools:start" # start backend server

build-frontend = "scripts.tools:build_frontend" # build frontend bundle
build-frontend-dev = "scripts.tools:build_frontend_dev" # build frontend bundle for development

# Package-specific commands
lint-packages = "scripts.tools:lint_packages" # lint packages
test-packages = "scripts.tools:test_packages" # test packages
build-packages = "scripts.tools:build_packages" # build packages


